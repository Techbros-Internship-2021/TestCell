group 'fr.bmartel'
version '1.32.1'

apply plugin: 'java'
targetCompatibility = '1.7'
sourceCompatibility = '1.7'

apply plugin: 'pmd'

pmd {
    toolVersion = '5.3.2'
    ruleSets = []
    ruleSetFiles = files('config/pmd/rulesets.xml')
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'fr.bmartel:http-endec:1.04'
    compile 'commons-net:commons-net:3.6'
    testCompile 'junit:junit:4.11'
    testCompile 'net.jodah:concurrentunit:0.4.2'
    testCompile 'com.googlecode.json-simple:json-simple:1.1.1'
    testCompile 'com.google.code.gson:gson:2.8.0'
}

def siteUrl = 'https://github.com/bertrandmartel/speed-test-lib'
def gitUrl = 'https://github.com/bertrandmartel/speed-test-lib.git'

Object.metaClass.notIn = { Object collection ->
    !(delegate in collection)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task generateJavadoc(type: Javadoc) {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    destinationDir = file("./doc/")
}

compileJava {
    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

test {
    testLogging.showStandardStreams = true
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
